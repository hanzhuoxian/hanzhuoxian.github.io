<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自控力</title>
    <link href="/2023/10/31/notes/self_control/"/>
    <url>/2023/10/31/notes/self_control/</url>
    
    <content type="html"><![CDATA[<h2 id="图书信息"><a href="#图书信息" class="headerlink" title="图书信息"></a>图书信息</h2><table><thead><tr><th>书名</th><th>自控力法</th></tr></thead><tbody><tr><td>作者</td><td>【英】凯利麦格尼格尔</td></tr><tr><td>出版社</td><td>京东读书</td></tr><tr><td>阅读时间</td><td>2023-10-30 ~ 2023</td></tr></tbody></table><h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><blockquote><p>自控只是一时的行为，而力不从心和失控却是常态。</p></blockquote><p>一直以为是自己菜，自己自控力不行，其实自己碰到的问题有可能是共性问题，碰到问题需要去查找相关资料、去研究、去学习和去解决。而不是一味的内疚。<br>——-end——-</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>笔记</tag>
      
      <tag>自控力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刘澜-《学习力 30 讲》</title>
    <link href="/2023/10/28/notes/learning_ability/"/>
    <url>/2023/10/28/notes/learning_ability/</url>
    
    <content type="html"><![CDATA[<h2 id="发刊词"><a href="#发刊词" class="headerlink" title="发刊词"></a>发刊词</h2><h3 id="有效学习的定义？"><a href="#有效学习的定义？" class="headerlink" title="有效学习的定义？"></a>有效学习的定义？</h3><blockquote><ol><li>你通过学习形成对各种问题的参考答案。</li><li>你把这个参考答案应用到自己的工作和生活之中，对自己的人生产生了积极的改变。</li></ol></blockquote><p>只学习没有应用就与不学习没有什么区别，学到之后需要用起来。</p><h3 id="什么叫学习力强？"><a href="#什么叫学习力强？" class="headerlink" title="什么叫学习力强？"></a>什么叫学习力强？</h3><blockquote><p>“听想变用” 四个方面能力都强</p><ol><li>听：听清楚，听明白。</li><li>想：自己动脑筋去想。老师讲的好不好，如果好好在哪里？如果不好不好在哪里？</li><li>变：你觉得某个老师讲的好，但是跟你实际情况有些距离，如何变一变把他讲的编程符合自己的需求。</li><li>用：我们学习知识必须用到自己身上。</li></ol></blockquote><p>原来这就是四问学习法，难道学习能力强就是四问学习法用的好的人？用一个成语来概括就是学以致用。</p><h3 id="学习力五项修炼"><a href="#学习力五项修炼" class="headerlink" title="学习力五项修炼"></a>学习力五项修炼</h3><blockquote><ol><li>反学习</li><li>参考答案思维方式</li><li>聚焦</li><li>模式化学习</li><li>深层迁移</li></ol></blockquote><p>学习力五项修炼是整篇课程的目录大纲。是整篇课程的核心思想。</p><h2 id="01-本质：学习力强的人是什么样的？"><a href="#01-本质：学习力强的人是什么样的？" class="headerlink" title="01 | 本质：学习力强的人是什么样的？"></a>01 | 本质：学习力强的人是什么样的？</h2><p>Q：你觉得学习力强的人是什么样的？他们有哪些特征值得你学习？</p><p>A：学习力强的人学的快，用的好，能坚持学习。特征：按时学习、学习深度很深。</p><blockquote><p>这个参考答案是：投资型学习者是学习力强的人，他们在学习上有长度、有宽度、有温度还有力度。</p></blockquote><h3 id="四种学习者"><a href="#四种学习者" class="headerlink" title="四种学习者"></a>四种学习者</h3><ul><li>生产型学习者：把时间用来生产产品或者提供服务，在当下产生了社会价值。</li><li>消费型学习者：你消费了一个产品或服务，当下感到身心愉悦。</li><li>投资型学习者:把时间花在当下不一定产生价值，但是在将来可以持久产生价值的活动。</li><li>浪费型学习者：如果你既没有生产、也没有消费、也没有投资那就是浪费了。</li></ul><h3 id="投资型学习者的四大特征"><a href="#投资型学习者的四大特征" class="headerlink" title="投资型学习者的四大特征"></a>投资型学习者的四大特征</h3><ul><li>终身学习</li><li>全身学习</li><li>学以致用</li><li>有自己的方法论</li></ul><p>02 | 方法：如何提升你的学习力？</p><p>学习力强的人的学习方法共性为 五项修炼：</p><ul><li>反学习：指的是把你已经学到的错误的东西给清除掉。这是一种减法式学习。</li><li>参考答案思维方式：就是说你不管学了什么，都要把他当做参考答案，而不是标准答案。</li><li>聚焦：学的少 学得深</li><li>模式化学习：学习事物的本质，而本质是隐藏在表面之下的，不是那么容易被发现的。</li><li>深层迁移：就是把一种情景中学到的知识用到另一种情景之中。</li></ul><p>03 | 路标：为什么成年人首先要反学习？</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>笔记</tag>
      
      <tag>刘澜-《学习力 30 讲》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何有效阅读一本书</title>
    <link href="/2023/10/20/notes/effective_read/"/>
    <url>/2023/10/20/notes/effective_read/</url>
    
    <content type="html"><![CDATA[<h2 id="图书信息"><a href="#图书信息" class="headerlink" title="图书信息"></a>图书信息</h2><table><thead><tr><th>书名</th><th>如何有效阅读一本书：笔记读书法</th></tr></thead><tbody><tr><td>作者</td><td>【日】奥野宣之</td></tr><tr><td>出版社</td><td>江西人民出版社</td></tr><tr><td>阅读时间</td><td>2023-10-01 ~ 2023-10-20</td></tr></tbody></table><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>摘抄：</p><p>笔记：</p><p>感想：<br>一直以为读书就是看过之后就可以了，其实不然，要将书中的内容内化为自己的本能才能算掌握好这本书</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01 入门</title>
    <link href="/2023/10/19/gopl/chapter01/"/>
    <url>/2023/10/19/gopl/chapter01/</url>
    
    <content type="html"><![CDATA[<p>本章介绍 <code>Go</code> 语言的基础组件。本章提供了足够的信息和示例程序，希望可以帮你们尽快入门，写出有用的程序。本章和之后章节的示例程序都针对你可能遇到的现实案例。先了解几个 <code>Go</code> 程序涉及的主题从简单的文件处理、图像处理到互联网客户端和服务端并发。当然第一章不会解释细枝末节，但用这些程序来学习一门新语言还是很有效的。</p><p>学习一门新语言时，会有一种自然的倾向，按照自己熟悉的语言套路写新语言程序，学习 <code>Go</code> 语言的过程中，请警惕这种想法，尽量别这么做。我们会演示怎么写好 <code>Go</code> 语言程序，所以请用本书的代码作为你写程序时的指南。</p><h2 id="1-1-Hello-World"><a href="#1-1-Hello-World" class="headerlink" title="1.1 Hello World"></a>1.1 Hello World</h2><p>我们现在以传统的 ”Hello World“ 来开始吧，这个例子首次出现于 1978 年出版的 《The C Programming Language》。<code>C</code> 语言是直接影响 <code>Go</code> 语言设计的语言之一，这个例子体现了 <code>Go</code> 语言的一些核心理念。</p><p>我们使用 <code>go mod</code> 模式，我们本书的基础目录为 <code>github.com/hanzhuoxian/study/go/gopl</code> ，在当前目录下执行  <code>go mod init github.com/hanzhuoxian/study/go/gopl</code>,新建目录 <code>mkdir ch01/helloworld</code>，在 helloworld 目录下，新建文件 <code>helloword.go</code>,文件内容如下：</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;helloworld&#x2F;helloword.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 声明包</span><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// 导入标准I/O包</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">// 程序的入口方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello，世界&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Go</code> 语言是一门编译型语言，<code>Go</code> 语言的工具链将源代码及其依赖转化成计算机的机器指令。<code>Go</code> 语言提供的工具都通过单独的命令 <code>go</code> 调用，<code>go</code> 有一系列子命令。最简单的一个子命令就是 <code>run</code> 。这个命令编译一个或多个以 <code>.go</code> 结尾的源文件、链接库文件，并运行最终生成的可执行文件（本书使用 $ 表示命令提示符）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run helloworld.go<br></code></pre></td></tr></table></figure><p>毫无意外，这个命令会输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hello，世界<br></code></pre></td></tr></table></figure><p><code>Go</code> 语言原生支持 Unicode，它可以处理全世界任何语言的文本。<br>如果不只是一次性实验，你肯定希望能编译这个程序，保存编译结果以备将来之用。可以用 <code>build</code> 子命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go build helloworld.go<br></code></pre></td></tr></table></figure><p>这个命令生成一个名为 <code>helloworld</code> 的可执行的二进制文件。之后你可以随时运行它，不需任何处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./helloworld<br>Hello，世界<br></code></pre></td></tr></table></figure><p>本书中所有示例代码上都有一行标记，利用这些标记可以从 <code>github.com</code> 代码仓库中获取代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://github.com/hanzhuoxian/study<br></code></pre></td></tr></table></figure><p>执行 <code>git clone https://github.com/hanzhuoxian/study</code> 命令，就可以将代码下载到本地。</p><p>来讨论下程序本身。<code>Go</code> 语言代码通过包（package）组织，包类似于其他语言里的库（libraries）或者模块（modules）。一个包由位于单个目录下的一个或多个 <code>.go</code> 源代码文件组成，目录定义包的作用。每个源文件都以一条 <code>package</code> 语句声明开始，这个例子里就是 <code>package main</code> ,表示该文件属于那个包，紧跟着一系列导入（<code>import</code>）的包，之后是存储在这个文件里的程序语句。</p><p><code>Go</code> 标准库提供了 100 多个包，以支持常见功能，如输入、输出、排序以及文本处理。比如 <code>fmt</code> 包就含有格式化输出、接受输入的函数。<code>Println</code> 是其中一个基础函数，可以打印以逗号间隔的一个或多个值，并在最后添加一个换行符，从而输出一整行。</p><p><code>main</code> 包比较特殊。它定义了一个独立可执行的程序，而不是一个库，在 <code>main</code> 包里的 <code>main</code> 函数也很特殊，它是整个程序执行时的入口。<code>main</code> 函数所做的事情就是程序做的，当然了，<code>main</code> 函数一般调用其他包里的函数完成很多工作（如 <code>fmt.Println</code>）。</p><p>必须告诉编译器源文件需要哪些包，这就是跟随在 <code>package</code> 声明后面的 <code>import</code> 扮演的角色。hello world 例子只用到了一个包，大多数程序需要导入多个包。</p><p>必须恰当导入需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。这项严格要求避免了程序开发过程中引入未使用的包。</p><p><code>import</code> 声明必须跟在文件的 <code>package</code> 声明之后。随后，则是组成程序的函数、变量、常量、类型的声明语句（分别由关键字 <code>func</code> 、<code>var</code> 、<code>const</code> 、<code>type</code> 定义）。这些内容的声明顺序并不重要。这个例子的程序已经尽可能短了，只声明了一个函数，其中只调用了一个其他函数。为了节省篇幅，有些时候示例程序会省略 <code>package</code> 和 <code>import</code>  声明，但是这些声明在源代码里有，并且必须得有才能编译。</p><p>一个函数的声明由 <code>func</code> 关键字、函数名、参数列表、返回值列表（这个例子里的 <code>main</code> 函数参数列表和返回值都是空的）以及包含在大括号里的函数体组成。第五章进一步考察函数。</p><p><code>Go</code> 语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句。实际上，编译器会主动把特定符号后的换行符转换为分号，因此换行符添加的位置会影响 <code>Go</code> 代码的正确解析（译注：比如行末是标识符、整数、浮点数、虚数、字符或字符串文字、关键字 <code>break</code>、<code>continue</code>、<code>fallthrough</code>或 <code>return</code> 中的一个、运算符和分隔符 <code>++</code>、<code>--</code>、<code>)</code>、<code>]</code> 或 <code>&#125;</code> 中的一个）。举个例子，函数的左括号 <code>&#123;</code> 必须和 <code>func</code> 函数声明在同一行上，且位于末尾，不能独占一行，而在表达式 <code>x+y</code> 中，可在 <code>+</code> 后换行，不能在 <code>+</code> 前换行（译注：以+结尾的话不会被插入分号分隔符，但是以 x 结尾的话则会被分号分隔符，从而导致编译错误）。</p><p><code>Go</code> 语言在代码格式上采取了很强硬的态度。<code>gofmt</code>工具把代码格式化为标准格式（译注：这个格式化工具没有任何可以调整代码格式的参数，<code>Go</code> 语言就是这么任性），并且 <code>go</code> 工具中的 <code>fmt</code> 子命令会对指定包，否则默认为当前目录中所有go 源文件应用 <code>gofmt</code> 命令。本书中的所有代码都被 gofmt 过。你也应该养成格式化自己的代码的习惯。以法令方式规定标准的代码格式可以避免无尽的无意义的琐碎争执（译注：也导致了 <code>Go</code> 语言的 TIOBE 排名较低，因为缺少撕逼的话题）。更重要的是，这样可以做多种自动源码转换，如果放任 <code>Go</code> 语言代码格式，这些转换就不大可能了。</p><p>很多文本编辑器都可以配置为保存文件时自动执行 <code>gofmt</code>，这样你的源代码总会被恰当地格式化。还有个相关的工具：<code>goimports</code>，可以根据代码需要，自动地添加或删除 <code>import</code> 声明。这个工具并没有包含在标准的分发包中，可以用下面的命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go install golang.org/x/tools/cmd/goimports@latest<br></code></pre></td></tr></table></figure><p>对于大多数用户来说，下载、编译包、运行测试用例、查看 <code>Go</code> 语言的文档等等常用功能都可以用 go 的工具完成 10.7 详细介绍这些知识。</p><h2 id="1-2-命令行参数"><a href="#1-2-命令行参数" class="headerlink" title="1.2 命令行参数"></a>1.2 命令行参数</h2><p>大多数程序都是处理输入，产生输出；这也正是计算的定义。但是程序如何获取要输入的数据呢？一些程序生成自己的数据，但通常情况下、输入来自于程序外部：文件、网络、连接、其他程序的输出、敲击前盘的用户、命令行参数或其他输入源。下面几个例子会讨论其中几个输入源，首先是命令行参数。</p><p><code>os</code> 包以跨平台的方式，提供了一些与操作系统交互的函数和变量。程序的命令行参数可以从 <code>os</code> 包的 <code>Args</code> 变量获取。<code>os</code> 包外部使用 <code>os.Args</code> 访问该变量。</p><p><code>os.Args</code> 变量是一个一个字符串（string）的<em>切片</em>（slice）,切片是 <code>Go</code> 语言的基础概念，稍后详细介绍。现在先把切片 <code>s</code> 当做数组元素序列，序列的长度动态变化，用 <code>s[i]</code> 访问单个元素，用 <code>s[m:n]</code> 获取子序列，序列的元素数目为 <code>len(s)</code>。和大多数编程语言类似，区间索引时，<code>Go</code> 语言也采用作闭右开形式，即区间包括包括第一个索引元素，不包括最后一个索引元素。因为这样可以简化逻辑。比如 <code>s[m:n]</code> 这个切片，<code>0&lt;=m&lt;=n&lt;=len(s)</code>，包含 <code>n-m</code> 个元素。</p><p><code>os.Args</code> 变量的第一个元素：<code>os.Args[0]</code> 是命令本身的名字；其他元素则是程序启动时传给他的参数。<code>s[m:n]</code> 形式的切片表达式，产生从第 <code>m</code> 个元素到第 <code>n-1</code> 个元素的切片，下个例子用到的元素包含在 <code>os.Args[1:len(os.Args)]</code> 切片中。如果省略切片表达式的 <code>m</code> 或 <code>n</code>，会默认传入 <code>0</code> 或 <code>len(s)</code>，因此前面的切片可以简写成 <code>os.Args[1:]</code>。</p><p>下面是 Unix 里 <code>echo</code> 命令的一份实现，<code>echo</code> 把它的命令行参数打印成一行。程序导入了两个包，用括号把它们括起来写成列表形式，而没有分开写成独立的 <code>import</code> 声明。两种形式都合法，列表形式习惯上用得多。包导入顺序并不重要；<code>gofmt</code> 工具格式化时按照字母顺序对包名排序。（示例有多个版本时，我们会对示例编号，这样可以明确当前正在讨论的是哪个。）</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;echo1&#x2F;main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// echo1 打印命令行的参数</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// go 在声明变量时没有显示初始化，go 语言会对变量隐式赋 0 值，字符串会赋值空字符串</span><br><span class="hljs-keyword">var</span> s, sep <span class="hljs-type">string</span><br><span class="hljs-comment">// 经典的for循环</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">len</span>(os.Args[<span class="hljs-number">1</span>:]); i++ &#123;<br><span class="hljs-comment">// += 是一个赋值运算符</span><br>s += sep + os.Args[i]<br>sep = <span class="hljs-string">&quot; &quot;</span><br>&#125;<br>fmt.Println(s)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注释语句以 <code>//</code> 开头。对于程序员来说，<code>//</code> 之后到行末之间所有的内容都是注释，被编译器忽略。按照惯例，我们在每个包的包声明前添加注释；对于 <code>main package</code>，注释包含一句或几句话，从整体角度对程序做个描述。</p><p><code>var</code> 声明定义了两个 <code>string</code> 类型的变量 <code>s</code> 和 <code>sep</code>。变量会在声明时直接初始化。如果变量没有显式初始化，则被隐式地赋予其类型的 <em>零值</em>（zero value），数值类型是 <code>0</code>，字符串类型是空字符串 <code>&quot;&quot;</code>。这个例子里，声明把 <code>s</code> 和 <code>sep</code> 隐式地初始化成空字符串。第 2 章再来详细地讲解变量和声明。</p><p>对数值类型，<code>Go 语言</code> 提供了常规的数值和逻辑运算符。而对 <code>string</code> 类型，<code>+</code> 运算符连接字符串。所以表达式：<code>sep + os.Args[i]</code> 表示连接字符串 <code>sep</code> 和 <code>os.Args[i]</code>。程序中使用的语句：<code>s+=sep+os.Args[i]</code> 是一条 <em>赋值语句</em>，将 <code>s</code> 的旧值跟 <code>sep</code> 与 <code>os.Args[i]</code> 连接后赋值回 <code>s</code>，等价于：<code>s=s+sep+os.Args[i]</code>。</p><p>运算符 <code>+=</code> 是赋值运算符（assignment operator），每种数值运算符或逻辑运算符，如 <code>+</code> 或 <code>*</code>，都有对应的赋值运算符。</p><p><code>echo</code> 程序可以每循环一次输出一个参数，这个版本却是不断地把新文本追加到末尾来构造字符串。字符串 <code>s</code> 开始为空，即值为 <code>&quot;&quot;</code>，每次循环会添加一些文本；第一次迭代之后，还会再插入一个空格，因此循环结束时每个参数中间都有一个空格。这是一种二次加工（quadratic process），当参数数量庞大时，开销很大，但是对于 <code>echo</code>，这种情形不大可能出现。本章会介绍 <code>echo</code> 的若干改进版，下一章解决低效问题。</p><p>循环索引变量 <code>i</code> 在 <code>for</code> 循环的第一部分中定义。符号 <code>:=</code> 是 <em>短变量声明</em>（short variable declaration）的一部分，这是定义一个或多个变量并根据它们的初始值为这些变量赋予适当类型的语句。下一章有这方面更多说明。</p><p>自增语句 <code>i++</code> 给 <code>i</code> 加 <code>1</code>；这和 <code>i+=1</code> 以及 <code>i=i+1</code> 都是等价的。对应的还有 <code>i--</code> 给 <code>i</code> 减 <code>1</code>。它们是语句，而不像 C 系的其它语言那样是表达式。所以 <code>j=i++</code> 非法，而且 <code>++</code> 和 <code>--</code> 都只能放在变量名后面，因此 <code>--i</code> 也非法。</p><p>Go 语言只有 <code>for</code> 循环这一种循环语句。<code>for</code> 循环有多种形式，其中一种如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> initialization; condition; post &#123;<br><span class="hljs-comment">// zero or more statements</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>for</code> 循环三个部分不需括号包围。大括号强制要求，左大括号必须和 <em><code>post</code></em> 语句在同一行。</p><p><em><code>initialization</code></em> 是可选的，在循环开始前执行，*<code>initialization</code>* 如果存在，必须是一条简单语句（simple statement），即短变量声明、自增语句、赋值语句或函数调用。<code>condition</code> 是一个布尔表达式（boolean expression ），其值在每次循环迭代开始时计算。如果为 <code>true</code> 则执行循环体语句。<code>post</code> 语句在循环体结束后执行，之后再次对 <code>condition</code> 求值。<code>condition</code> 为 <code>false</code> 时循环结束。</p><p><code>for</code> 循环的这三个部分每个都可以省略，如果省略  <code>initialization</code> 和 <code>post</code> 时分号也可以省略 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// a traditional while loop</span><br><span class="hljs-keyword">for</span> condition &#123;<br><span class="hljs-comment">// zero or more statement</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果连 <code>condition</code> 也省略了，像下面这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// a traditional infinite loop</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// zero or more statement</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这就变成一个无限循环，尽管如此，还可以用其他方式终止循环，如一条 <code>break</code> 或 <code>return</code> 语句。</p><p><code>for</code> 循环的另一种形式，在某种数据类型的区间上遍历，如字符串或切片，<code>echo</code> 的第二个版本展示了这种形式。</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;echo2&#x2F;main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// echo2 打印命令行的参数</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s, sep <span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>s += sep + arg<br>sep = <span class="hljs-string">&quot; &quot;</span><br>&#125;<br>fmt.Println(s)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>每次循环迭代， <code>range</code> 产生一对值；索引以及在改索引处的元素值，这个例子不需要索引，但是 <code>range</code> 语法要求处理元素必须处理索引。一种思路是把索引值赋值给一个临时变量（比如 temp）然后忽略它的值，但 <code>Go</code> 语言不允许使用无用的局部变量（local variables），因为这会导致编译错误。</p><p>Go 语言中这种情况的解决方法是用 <em>空标识符</em>（blank identifier），即 <code>_</code>（也就是下划线）。空标识符可用于在任何语法需要变量名但程序逻辑不需要的时候（如：在循环里）丢弃不需要的循环索引，并保留元素值。大多数的 Go 程序员都会像上面这样使用 <code>range</code> 和 <code>_</code> 写 <code>echo</code> 程序，因为隐式地而非显式地索引 <code>os.Args</code>，容易写对。</p><p><code>echo</code> 的这个版本使用一条短变量声明来声明并初始化 <code>s</code> 和 <code>seps</code>，也可以将这两个变量分开声明，声明一个变量有好几种方式，下面这些都等价：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span> = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>用哪种不用哪种，为什么呢？第一种形式，是一条短变量声明，最简洁，但只能用在函数内部，而不能用于包变量。第二种形式依赖于字符串的默认初始化零值机制，被初始化为 <code>&quot;&quot;</code>。第三种形式用得很少，除非同时声明多个变量。第四种形式显式地标明变量的类型，当变量类型与初值类型相同时，类型冗余，但如果两者类型不同，变量类型就必须了。实践中一般使用前两种形式中的某个，初始值重要的话就显式地指定变量的值，否则指定类型使用隐式初始化。</p><p>如前文所述，每次循环迭代字符串 <code>s</code> 的内容都会更新。<code>+=</code> 连接原字符串、空格和下个参数，产生新字符串，并把它赋值给 <code>s</code>。<code>s</code> 原来的内容已经不再使用，将在适当时机对它进行垃圾回收。</p><p>如果连接涉及的数据量很大，这种方式代价高昂。一种简单且高效的解决方案是使用 <code>strings</code> 包的 <code>Join</code> 函数：</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;echo3&#x2F;main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">// echo3 打印命令行的参数</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(strings.Join(os.Args[<span class="hljs-number">1</span>:], <span class="hljs-string">&quot; &quot;</span>))<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后，如果不关心输出格式，只想看看输出值，或许只是为了调试，可以用 <code>Println</code> 为我们格式化输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(os.Args[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><p>这条语句的输出结果跟 <code>strings.Join</code> 得到的结果很像，只是被放到了一对方括号里。切片都会被打印成这种格式。</p><hr><p><strong>练习 1.1：</strong> 修改 <code>echo</code> 程序，使其能够打印 <code>os.Args[0]</code>，即被执行命令本身的名字。</p><p><strong>练习 1.2：</strong> 修改 <code>echo</code> 程序，使其打印每个参数的索引和值，每个一行。</p><p><strong>练习 1.3：</strong> 做实验测量潜在低效的版本和使用了 <code>strings.Join</code> 的版本的运行时间差异。（[1.6 节]讲解了部分 <code>time</code> 包，[11.4 节]展示了如何写标准测试程序，以得到系统性的性能评测。）</p><h2 id="1-3-查找重复的行"><a href="#1-3-查找重复的行" class="headerlink" title="1.3 查找重复的行"></a>1.3 查找重复的行</h2><p>对文件做拷贝、打印、搜索、排序、统计或类似事情的程序都有一个差不多的程序结构：一个处理输入的循环，在每个元素上执行计算处理，在处理的同时或最后产生输出。我们会展示一个名为 <code>dup</code> 的程序的三个版本；灵感来自于 Unix 的 <code>uniq</code> 命令，其寻找相邻的重复行。该程序使用的结构和包是个参考范例，可以方便地修改。</p><p><code>dup</code> 的第一个版本打印标准输入中多次出现的行，以重复次数开头。该程序将引入 <code>if</code> 语句，<code>map</code> 数据类型以及 <code>bufio</code> 包。</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;dup1&#x2F;main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>count := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>input := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>count[input.Text()]++<br><span class="hljs-keyword">if</span> input.Err() != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;input is error&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> line, n := <span class="hljs-keyword">range</span> count &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%s\n&quot;</span>, n, line)<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>正如 <code>for</code> 循环一样，<code>if</code> 语句条件两边也不加括号，但是主体部分需要加。<code>if</code> 语句的 <code>else</code> 部分是可选的，在 <code>if</code> 的条件为 <code>false</code> 时执行。</p><p><strong>map</strong> 存储了键&#x2F;值（key&#x2F;value）的集合，对集合元素，提供常数时间的存、取或测试操作。键可以是任意类型，只要其值能用 <code>==</code> 运算符比较，最常见的例子是字符串；值则可以是任意类型。这个例子中的键是字符串，值是整数。内置函数 <code>make</code> 创建空 <code>map</code>，此外，它还有别的作用。4.3 节讨论 <code>map</code>。</p><p>每次 <code>dup</code> 读取一行输入，该行被当做键存入 <code>map</code>，其对应的值递增。<code>counts[input.Text()]++</code> 语句等价下面两句：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">line = input.Text()<br>counts[line] = counts[like] + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>map</code> 中不含某个键时不用担心，首次读到新行时，等号右边的表达式 <code>counts[line]</code> 的值将被计算为其类型的零值，对于 <code>int</code> 即 <code>0</code>。</p><p>为了打印结果，我们使用了基于 <code>range</code> 的循环，并在 <code>counts</code> 这个 <code>map</code> 上迭代。跟之前类似，每次迭代得到两个结果，键和其在 <code>map</code> 中对应的值。<code>map</code> 的迭代顺序并不确定，从实践来看，该顺序随机，每次运行都会变化。这种设计是有意为之的，因为能防止程序依赖特定遍历顺序，而这是无法保证的。</p><p>继续来看 <code>bufio</code> 包，它使处理输入和输出方便又高效。<code>Scanner</code> 类型是该包最有用的特性之一，它读取输入并将其拆成行或单词；通常是处理行形式的输入最简单的方法。</p><p>程序使用短变量声明创建 <code>bufio.Scanner</code> 类型的变量 <code>input</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">input := bufio.NewScanner(os.Stdin)<br></code></pre></td></tr></table></figure><p>该变量从程序的标准输入中读取内容。每次调用 <code>input.Scan()</code>，即读入下一行，并移除行末的换行符；读取的内容可以调用 <code>input.Text()</code> 得到。<code>Scan</code> 函数在读到一行时返回 <code>true</code>，不再有输入时返回 <code>false</code>。</p><p>类似于 C 或其它语言里的 <code>printf</code> 函数，<code>fmt.Printf</code> 函数对一些表达式产生格式化输出。该函数的首个参数是个格式字符串，指定后续参数被如何格式化。各个参数的格式取决于“转换字符”（conversion character），形式为百分号后跟一个字母。举个例子，<code>%d</code> 表示以十进制形式打印一个整型操作数，而 <code>%s</code> 则表示把字符串型操作数的值展开。</p><p><code>Printf</code> 有一大堆这种转换，Go程序员称之为<em>动词（verb）</em>。下面的表格虽然远不是完整的规范，但展示了可用的很多特性：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">%d          十进制整数<br>%x, %o, %b  十六进制，八进制，二进制整数。<br>%f, %g, %e  浮点数： 3.141593 3.141592653589793 3.141593e+00<br>%t          布尔：true或false<br>%c          字符（rune） (Unicode码点)<br>%s          字符串<br>%q          带双引号的字符串&quot;abc&quot;或带单引号的字符&#x27;c&#x27;<br>%v          变量的自然形式（natural format）<br>%T          变量的类型<br>%%          字面上的百分号标志（无操作数）<br></code></pre></td></tr></table></figure><p><code>dup1</code> 的格式字符串中还含有制表符<code>\t</code>和换行符<code>\n</code>。字符串字面上可能含有这些代表不可见字符的<strong>转义字符（escape sequences）</strong>。默认情况下，<code>Printf</code> 不会换行。按照惯例，以字母 <code>f</code> 结尾的格式化函数，如 <code>log.Printf</code> 和 <code>fmt.Errorf</code>，都采用 <code>fmt.Printf</code> 的格式化准则。而以 <code>ln</code> 结尾的格式化函数，则遵循 <code>Println</code> 的方式，以跟 <code>%v</code> 差不多的方式格式化参数，并在最后添加一个换行符。（译注：后缀 <code>f</code> 指 <code>format</code>，<code>ln</code> 指 <code>line</code>。）</p><p>很多程序要么从标准输入中读取数据，如上面的例子所示，要么从一系列具名文件中读取数据。<code>dup</code> 程序的下个版本读取标准输入或是使用 <code>os.Open</code> 打开各个具名文件，并操作它们。</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;dup2&#x2F;main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 定义缓存行次数的map</span><br>counts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><span class="hljs-comment">// 获取命令行</span><br>files := os.Args[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(files) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 使用标准输入</span><br>countLines(os.Stdin, counts)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 循环读取文件</span><br><span class="hljs-keyword">for</span> _, filePath := <span class="hljs-keyword">range</span> files &#123;<br><span class="hljs-comment">// 打开文件</span><br>file, err := os.Open(filePath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;dup2: %v\n&quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>countLines(file, counts)<br>file.Close()<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> line, n := <span class="hljs-keyword">range</span> counts &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%s\n&quot;</span>, n, line)<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countLines</span><span class="hljs-params">(f *os.File, counts <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)</span></span> &#123;<br>input := bufio.NewScanner(f)<br><span class="hljs-keyword">for</span> input.Scan() &#123;<br>counts[input.Text()]++<br>&#125;<br><br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> ignoring potential errors from input.Err()</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>os.Open</code> 函数返回两个值。第一个值是被打开的文件（<code>*os.File</code>），其后被 <code>Scanner</code> 读取。</p><p><code>os.Open</code> 返回的第二个值是内置 <code>error</code> 类型的值。如果 <code>err</code> 等于内置值<code>nil</code>（译注：相当于其它语言里的 <code>NULL</code>），那么文件被成功打开。读取文件，直到文件结束，然后调用 <code>Close</code> 关闭该文件，并释放占用的所有资源。相反的话，如果 <code>err</code> 的值不是 <code>nil</code>，说明打开文件时出错了。这种情况下，错误值描述了所遇到的问题。我们的错误处理非常简单，只是使用 <code>Fprintf</code> 与表示任意类型默认格式值的动词 <code>%v</code>，向标准错误流打印一条信息，然后 <code>dup</code> 继续处理下一个文件；<code>continue</code> 语句直接跳到 <code>for</code> 循环的下个迭代开始执行。</p><p>为了使示例代码保持合理的大小，本书开始的一些示例有意简化了错误处理，显而易见的是，应该检查 <code>os.Open</code> 返回的错误值，然而，使用 <code>input.Scan</code> 读取文件过程中，不大可能出现错误，因此我们忽略了错误处理。我们会在跳过错误检查的地方做说明。5.4 节中深入介绍错误处理。</p><p>注意 <code>countLines</code> 函数在其声明前被调用。函数和包级别的变量（package-level entities）可以任意顺序声明，并不影响其被调用。</p><p><code>map</code> 是一个由 <code>make</code> 函数创建的数据结构的引用。<code>map</code> 作为参数传递给某函数时，该函数接收这个引用的一份拷贝（copy，或译为副本），被调用函数对 <code>map</code> 底层数据结构的任何修改，调用者函数都可以通过持有的 <code>map</code> 引用看到。在我们的例子中，<code>countLines</code> 函数向 <code>counts</code> 插入的值，也会被 <code>main</code> 函数看到。</p><p><code>dup</code> 的前两个版本以”流”模式读取输入，并根据需要拆分成多个行。理论上，这些程序可以处理任意数量的输入数据。还有另一个方法，就是一口气把全部输入数据读到内存中，一次分割为多行，然后处理它们。下面这个版本，<code>dup3</code>，就是这么操作的。这个例子引入了 <code>ReadFile</code> 函数（来自于<code>io/ioutil</code>包），其读取指定文件的全部内容，<code>strings.Split</code> 函数把字符串分割成子串的切片。（<code>Split</code> 的作用与前文提到的 <code>strings.Join</code> 相反。）</p><p>我们略微简化了 <code>dup3</code>。首先，由于 <code>ReadFile</code> 函数需要文件名作为参数，因此只读指定文件，不读标准输入。其次，由于行计数代码只在一处用到，故将其移回 <code>main</code> 函数。</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;dup3&#x2F;main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>counts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><span class="hljs-keyword">for</span> _, filename := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>data, err := os.ReadFile(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;dup3: %v\n&quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> _, line := <span class="hljs-keyword">range</span> strings.Split(<span class="hljs-type">string</span>(data), <span class="hljs-string">&quot;\n&quot;</span>) &#123;<br>counts[line]++<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">for</span> line, n := <span class="hljs-keyword">range</span> counts &#123;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\t%s\n&quot;</span>, n, line)<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>ReadFile</code> 函数返回一个字节切片（byte slice），必须把它转换为 <code>string</code>，才能用 <code>strings.Split</code> 分割。我们会在3.5.4 节详细讲解字符串和字节切片。</p><hr><p><strong>练习 1.4：</strong> 修改 <code>dup2</code>，出现重复的行时打印文件名称。</p><h2 id="1-4-GIF动画"><a href="#1-4-GIF动画" class="headerlink" title="1.4. GIF动画"></a>1.4. GIF动画</h2><p>下面的程序会演示 <code>Go语言</code> 标准库里的 <code>image</code> 这个 <code>package</code> 的用法，我们会用这个包来生成一系列的 bit-mapped 图，然后将这些图片编码为一个 GIF 动画。我们生成的图形名字叫利萨如图形（Lissajous figures），这种效果是在1960年代的老电影里出现的一种视觉特效。它们是协振子在两个纬度上振动所产生的曲线，比如两个sin正弦波分别在x轴和y轴输入会产生的曲线。图1.1是这样的一个例子：</p><p><img src="/img/gopl/ch1-01.png"></p><p>译注：要看这个程序的结果，需要将标准输出重定向到一个GIF图像文件（使用 <code>./lissajous &gt; output.gif</code> 命令）。下面是GIF图像动画效果：</p><p><img src="/img/gopl/ch1-01.gif"></p><p>这段代码里我们用了一些新的结构，包括 <code>const</code> 声明，<code>struct</code> 结构体类型，复合声明。和我们举的其它的例子不太一样，这一个例子包含了浮点数运算。这些概念我们只在这里简单地说明一下，之后的章节会更详细地讲解。</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;lissajous&#x2F;main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Lissajous generates GIF animations of random Lissajous figures.</span><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;image&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;image/gif&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> palette = []color.Color&#123;color.White, color.Black&#125;<br><br><span class="hljs-keyword">const</span> (<br>whiteIndex = <span class="hljs-number">0</span> <span class="hljs-comment">//palette中的第一个元素</span><br>blackIndex = <span class="hljs-number">1</span> <span class="hljs-comment">//palette中的第二个元素</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>lissajous(os.Stdout)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lissajous</span><span class="hljs-params">(out io.Writer)</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>cycles = <span class="hljs-number">5</span>    <span class="hljs-comment">//完整 x 振荡器转数</span><br>res    = <span class="hljs-number">0.01</span> <span class="hljs-comment">//角分辨率</span><br>size   = <span class="hljs-number">100</span>  <span class="hljs-comment">//图像画布封面[-size..+size]</span><br>nframe = <span class="hljs-number">64</span>   <span class="hljs-comment">//动画帧数</span><br>delay  = <span class="hljs-number">8</span>    <span class="hljs-comment">//以10ms为单位的帧间延迟</span><br>)<br><br>freq := rand.Float64() * <span class="hljs-number">3.0</span> <span class="hljs-comment">//</span><br>anim := gif.GIF&#123;LoopCount: nframe&#125;<br>phase := <span class="hljs-number">0.0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; nframe; i++ &#123;<br>rect := image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>, <span class="hljs-number">2</span>*size+<span class="hljs-number">1</span>) <span class="hljs-comment">// 画布大小</span><br>img := image.NewPaletted(rect, palette)      <span class="hljs-comment">// 所有像素点都会被设置为其0值，也就是第一个palette的值</span><br><span class="hljs-keyword">for</span> t := <span class="hljs-number">0.0</span>; t &lt; cycles*<span class="hljs-number">2</span>*math.Pi; t += res &#123;<br>x := math.Sin(t)<br>y := math.Sin(t*freq + phase)<br>img.SetColorIndex(size+<span class="hljs-type">int</span>(x*size+<span class="hljs-number">0.5</span>), size+<span class="hljs-type">int</span>(y*size+<span class="hljs-number">0.5</span>), blackIndex)<br>&#125;<br>phase += <span class="hljs-number">0.1</span><br>anim.Delay = <span class="hljs-built_in">append</span>(anim.Delay, delay) <span class="hljs-comment">// 延迟80ms</span><br>anim.Image = <span class="hljs-built_in">append</span>(anim.Image, img)   <span class="hljs-comment">// 添加一帧</span><br>&#125;<br>gif.EncodeAll(out, &amp;anim)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当我们 <code>import</code> 了一个包路径包含有多个单词的 <code>package</code> 时，比如 <code>image/color</code>（image和color两个单词），通常我们只需要用最后那个单词表示这个包就可以。所以当我们写 <code>color.White</code> 时，这个变量指向的是 <code>image/color</code> 包里的变量，同理 <code>gif.GIF</code> 是属于 <code>image/gif</code> 包里的变量。</p><p>这个程序里的常量声明给出了一系列的常量值，常量是指在程序编译后运行时始终都不会变化的值，比如圈数、帧数、延迟值。常量声明和变量声明一般都会出现在包级别，所以这些常量在整个包中都是可以共享的，或者你也可以把常量声明定义在函数体内部，那么这种常量就只能在函数体内用。目前常量声明的值必须是一个数字值、字符串或者一个固定的boolean值。</p><p><code>[]color.Color&#123;...&#125;</code> 和 <code>gif.GIF&#123;...&#125;</code> 这两个表达式就是我们说的复合声明（4.2和4.4.1节有说明）。这是实例化Go语言里的复合类型的一种写法。这里的前者生成的是一个 <code>slice</code> 切片，后者生成的是一个 <code>struct</code> 结构体。</p><p><code>gif.GIF</code> 是一个 <code>struct</code> 类型（参考4.4节）。<code>struct</code> 是一组值或者叫字段的集合，不同的类型集合在一个 <code>struct</code> 可以让我们以一个统一的单元进行处理。<code>anim</code> 是一个 <code>gif.GIF</code> 类型的 <code>struct</code> 变量。这种写法会生成一个 <code>struct</code> 变量，并且其内部变量 <code>LoopCount</code> 字段会被设置为 <code>nframes</code>；而其它的字段会被设置为各自类型默认的零值。<code>struct</code>内部的变量可以以一个点（.）来进行访问，就像在最后两个赋值语句中显式地更新了<code>anim</code>这个<code>struct</code>的<code>Delay</code>和<code>Image</code>字段。</p><p><code>lissajous</code> 函数内部有两层嵌套的 <code>for</code> 循环。外层循环会循环 64 次，每一次都会生成一个单独的动画帧。它生成了一个包含两种颜色的 201*201 大小的图片，白色和黑色。所有像素点都会被默认设置为其零值（也就是调色板palette里的第0个值），这里我们设置的是白色。每次外层循环都会生成一张新图片，并将一些像素设置为黑色。其结果会<code>append</code>到之前结果之后。这里我们用到了<code>append</code>(参考4.2.1)内置函数，将结果<code>append</code>到<code>anim</code>中的帧列表末尾，并设置一个默认的 80ms 的延迟值。循环结束后所有的延迟值被编码进了 GIF 图片中，并将结果写入到输出流。<code>out</code> 这个变量是 <code>io.Writer</code> 类型，这个类型支持把输出结果写到很多目标，很快我们就可以看到例子。</p><p>内层循环设置两个偏振值。x轴偏振使用sin函数。y轴偏振也是正弦波，但其相对x轴的偏振是一个0-3的随机值，初始偏振值是一个零值，随着动画的每一帧逐渐增加。循环会一直跑到x轴完成五次完整的循环。每一步它都会调用 <code>SetColorIndex</code> 来为(x,y)点来染黑色。</p><p><code>main</code> 函数调用 <code>lissajous</code> 函数，用它来向标准输出流打印信息，所以下面这个命令会像图 1.1 中产生一个 GIF 动画。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run . &gt;out.gif<br></code></pre></td></tr></table></figure><p><strong>练习 1.5：</strong> 修改前面的Lissajous程序里的调色板，由黑色改为绿色。我们可以用 <code>color.RGBA&#123;0xRR, 0xGG, 0xBB, 0xff&#125;</code> 来得到 <code>#RRGGBB</code> 这个色值，三个十六进制的字符串分别代表红、绿、蓝像素。</p><p><strong>练习 1.6：</strong> 修改Lissajous程序，修改其调色板来生成更丰富的颜色，然后修改SetColorIndex的第三个参数，看看显示结果吧。</p><h2 id="1-5-获取URL"><a href="#1-5-获取URL" class="headerlink" title="1.5. 获取URL"></a>1.5. 获取URL</h2><p>对于很多现代应用来说，访问互联网上的信息和访问本地文件系统一样重要。Go语言在 <code>net</code> 这个强大 <code>package</code> 的帮助下提供了一系列的 <code>package</code> 来做这件事情，使用这些包可以更简单地用网络收发信息，还可以建立更底层的网络连接，编写服务器程序。在这些情景下，Go语言原生的并发特性（在第八章中会介绍）显得尤其好用。</p><p>为了最简单地展示基于HTTP获取信息的方式，下面给出一个示例程序 <code>fetch</code>，这个程序将获取对应的<code>url</code>，并将其源文本打印出来；这个例子的灵感来源于 <code>curl</code> 工具。当然，<code>curl</code> 提供的功能更为复杂丰富，这里只编写最简单的样例。这个样例之后还会多次被用到。</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;fetch&#x2F;main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Fetch prints the content found at a URL.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;fetch: %v\n&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>b, err := io.ReadAll(resp.Body)<br>resp.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;fetch: reading %s: %v\n&quot;</span>, url, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s&quot;</span>, b)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序从两个 <code>package</code> 中导入了函数，<code>net/http</code> 和 <code>io</code>，<code>http.Get</code>函数是创建HTTP请求的函数，如果获取过程没有出错，那么会在<code>resp</code>这个结构体中得到访问的请求结果。<code>resp</code>的<code>Body</code>字段包括一个可读的服务器响应流。<code>io.ReadAll</code>函数从<code>response</code>中读取到全部内容；将其结果保存在变量<code>b</code>中。<code>resp.Body.Close</code>关闭<code>resp</code>的<code>Body</code>流，防止资源泄露，<code>Printf</code>函数会将结果<code>b</code>写出到标准输出流中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run . https://baidu.com<br></code></pre></td></tr></table></figure><p>HTTP 请求如果失败了的话，会得到下面这样的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run . https://baidu.comddd<br><span class="hljs-built_in">read</span> https://baidu.comddd error : Get <span class="hljs-string">&quot;https://baidu.comddd&quot;</span>: dial tcp: lookup baidu.comddd: no such host<br></code></pre></td></tr></table></figure><p>无论哪种失败原因，我们的程序都用了<code>os.Exit</code>函数来终止进程，并且返回一个<code>status</code>错误码，其值为1。</p><p><strong>练习 1.7：</strong> 函数调用io.Copy(dst, src)会从src中读取内容，并将读到的结果写入到dst中，使用这个函数替代掉例子中的ioutil.ReadAll来拷贝响应结构体到os.Stdout，避免申请一个缓冲区（例子中的b）来存储。记得处理io.Copy返回结果中的错误。</p><p><strong>练习 1.8：</strong> 修改fetch这个范例，如果输入的url参数没有 <code>http://</code> 前缀的话，为这个url加上该前缀。你可能会用到strings.HasPrefix这个函数。</p><p><strong>练习 1.9：</strong> 修改fetch打印出HTTP协议的状态码，可以从resp.Status变量得到该状态码。</p><h2 id="1-6-并发获取多个-URL"><a href="#1-6-并发获取多个-URL" class="headerlink" title="1.6. 并发获取多个 URL"></a>1.6. 并发获取多个 URL</h2><p><code>Go语言</code> 最有意思并且最新奇的特性就是对并发编程的支持。并发编程是一个大话题，在第八章和第九章中会专门讲到。这里我们只浅尝辄止地来体验一下<code>Go语言</code>里的<code>goroutine</code>和<code>channel</code>。</p><p>下面的例子<code>fetchall</code>，和前面小节的<code>fetch</code>程序所要做的工作基本一致，fetchall的特别之处在于它会同时去获取所有的URL，所以这个程序的总执行时间不会超过执行时间最长的那一个任务，前面的<code>fetch</code>程序执行时间则是所有任务执行时间之和。<code>fetchall</code>程序只会打印获取的内容大小和经过的时间，不会像之前那样打印获取的内容。</p><p><em>github.com&#x2F;hanzhuoxian&#x2F;study&#x2F;go&#x2F;gopl&#x2F;ch01&#x2F;fetchall&#x2F;main.go</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Fetchall fetches URLs in parallel and reports their times and sizes.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>start := time.Now()<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br><span class="hljs-keyword">go</span> fetch(url, ch) <span class="hljs-comment">// start a goroutine</span><br>&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> os.Args[<span class="hljs-number">1</span>:] &#123;<br>fmt.Println(&lt;-ch) <span class="hljs-comment">// receive from channel ch</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%.2fs elapsed\n&quot;</span>, time.Since(start).Seconds())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetch</span><span class="hljs-params">(url <span class="hljs-type">string</span>, ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> &#123;<br>start := time.Now()<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>ch &lt;- fmt.Sprint(err) <span class="hljs-comment">// send to channel ch</span><br><span class="hljs-keyword">return</span><br>&#125;<br>nbytes, err := io.Copy(ioutil.Discard, resp.Body)<br>resp.Body.Close() <span class="hljs-comment">// don&#x27;t leak resources</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;while reading %s: %v&quot;</span>, url, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>secs := time.Since(start).Seconds()<br>ch &lt;- fmt.Sprintf(<span class="hljs-string">&quot;%.2fs  %7d  %s&quot;</span>, secs, nbytes, url)<br>&#125;<br></code></pre></td></tr></table></figure><p>下面使用fetchall来请求几个地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <br>$ go run . https://golang.org http://gopl.io https://godoc.org<br>0.14s     6852  https://godoc.org<br>0.16s     7261  https://golang.org<br>0.48s     2475  http://gopl.io<br>0.48s elapsed<br></code></pre></td></tr></table></figure><p><code>goroutine</code> 是一种函数的并发执行方式，而 <code>channel</code> 是用来在 <code>goroutine</code> 之间进行参数传递。<code>main</code> 函数本身也运行在一个 <code>goroutine</code> 中，而<code>go function</code>则表示创建一个新的<code>goroutine</code>，并在这个新的<code>goroutine</code>中执行这个函数。</p><p><code>main</code> 函数中用<code>make</code>函数创建了一个传递<code>string</code>类型参数的<code>channel</code>，对每一个命令行参数，我们都用<code>go</code>这个关键字来创建一个<code>goroutine</code>，并且让函数在这个<code>goroutine</code>异步执行<code>http.Get</code>方法。这个程序里的<code>io.Copy</code>会把响应的<code>Body</code>内容拷贝到<code>ioutil.Discard</code>输出流中（译注：可以把这个变量看作一个垃圾桶，可以向里面写一些不需要的数据），因为我们需要这个方法返回的字节数，但是又不想要其内容。每当请求返回内容时，<code>fetch</code>函数都会往<code>ch</code>这个<code>channel</code>里写入一个字符串，由<code>main</code>函数里的第二个<code>for</code>循环来处理并打印<code>channel</code>里的这个字符串。</p><p>当一个<code>goroutine</code>尝试在一个<code>channel</code>上做<code>send</code>或者<code>receive</code>操作时，这个<code>goroutine</code>会阻塞在调用处，直到另一个<code>goroutine</code>从这个<code>channel</code>里接收或者写入值，这样两个<code>goroutine</code>才会继续执行<code>channel</code>操作之后的逻辑。在这个例子中，每一个<code>fetch</code>函数在执行时都会往<code>channel</code>里发送一个值<code>（ch &lt;- expression）</code>，主函数负责接收这些值<code>（&lt;-ch）</code>。这个程序中我们用<code>main</code>函数来完整地处理&#x2F;接收所有<code>fetch</code>函数传回的字符串，可以避免因为有两个<code>goroutine</code>同时完成而使得其输出交错在一起的危险。</p><p><strong>练习 1.10：</strong> 找一个数据量比较大的网站，用本小节中的程序调研网站的缓存策略，对每个URL执行两遍请求，查看两次时间是否有较大的差别，并且每次获取到的响应内容是否一致，修改本节中的程序，将响应结果输出到文件，以便于进行对比。</p><p><strong>练习 1.11：</strong> 在fetchall中尝试使用长一些的参数列表，比如使用在alexa.com的上百万网站里排名靠前的。如果一个网站没有回应，程序将采取怎样的行为？（Section8.9 描述了在这种情况下的应对机制）。</p><h2 id="1-7-Web服务"><a href="#1-7-Web服务" class="headerlink" title="1.7. Web服务"></a>1.7. Web服务</h2><p><code>Go语言</code>的内置库使得写一个类似<code>fetch</code>的<code>web</code>服务器变得异常地简单。在本节中，我们会展示一个微型服务器，这个服务器的功能是返回当前用户正在访问的 URL。比如用户访问的是 <a href="http://localhost:8000/hello">http://localhost:8000/hello</a> ，那么响应是 <code>URL.Path = &quot;hello&quot;</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Server1 is a minimal &quot;echo&quot; server.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handler) <span class="hljs-comment">// each request calls handler</span><br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8000&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// handler echoes the Path component of the request URL r.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;URL.Path = %q\n&quot;</span>, r.URL.Path)<br>&#125;<br></code></pre></td></tr></table></figure><p>我们只用了八九行代码就实现了一个Web服务程序，这都是多亏了标准库里的方法已经帮我们完成了大量工作。<code>main</code> 函数将所有发送到&#x2F;路径下的请求和 <code>handler</code> 函数关联起来，&#x2F; 开头的请求其实就是所有发送到当前站点上的请求，服务监听 8000 端口。发送到这个服务的“请求”是一个 <code>http.Request</code> 类型的对象，这个对象中包含了请求中的一系列相关字段，其中就包括我们需要的URL。当请求到达服务器时，这个请求会被传给 <code>handler</code> 函数来处理，这个函数会将 <code>/hello</code> 这个路径从请求的 <code>URL</code> 中解析出来，然后把其发送到响应中，这里我们用的是标准输出流的 <code>fmt.Fprintf</code>。<code>Web</code>服务会在第 7.7 节中做更详细的阐述。</p><p>让我们在后台运行这个服务程序。如果你的操作系统是 Mac OS X 或者 Linux，那么在运行命令的末尾加上一个 &amp; 符号，即可让程序简单地跑在后台，windows 下可以在另外一个命令行窗口去运行这个程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run . &amp;<br></code></pre></td></tr></table></figure><p>现在可以通过命令行来发送客户端请求了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./fetch http://localhost:8000<br>URL.Path = <span class="hljs-string">&quot;/&quot;</span><br><br>$ ./fetch http://localhost:8000/help<br>URL.Path = <span class="hljs-string">&quot;/help&quot;</span><br><br></code></pre></td></tr></table></figure><p>还可以直接在浏览器里访问这个URL，然后得到返回结果，如图1.2：<br><img src="/img/ch01-02.png" alt="图1.2"><br>在这个服务的基础上叠加特性是很容易的。一种比较实用的修改是为访问的url添加某种状态。比如，下面这个版本输出了同样的内容，但是会对请求的次数进行计算；对URL的请求结果会包含各种URL被访问的总次数，直接对&#x2F;count这个URL的访问要除外。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Server2 is a minimal &quot;echo&quot; and counter server.</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> mu sync.Mutex<br><span class="hljs-keyword">var</span> count <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handler)<br>http.HandleFunc(<span class="hljs-string">&quot;/count&quot;</span>, counter)<br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8000&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// handler echoes the Path component of the requested URL.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>mu.Lock()<br>count++<br>mu.Unlock()<br>fmt.Fprintf(w, <span class="hljs-string">&quot;URL.Path = %q\n&quot;</span>, r.URL.Path)<br>&#125;<br><br><span class="hljs-comment">// counter echoes the number of calls so far.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>mu.Lock()<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Count %d\n&quot;</span>, count)<br>mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><p>这个服务器有两个请求处理函数，根据请求的 <code>url</code> 不同会调用不同的函数：对 <code>/count</code> 这个 <code>url</code> 的请求会调用到counter这个函数，其它的url都会调用默认的处理函数。如果你的请求<code>pattern</code>是以&#x2F;结尾，那么所有以该url为前缀的url都会被这条规则匹配。在这些代码的背后，服务器每一次接收请求处理时都会另起一个<code>goroutine</code>，这样服务器就可以同一时间处理多个请求。然而在并发情况下，假如真的有两个请求同一时刻去更新count，那么这个值可能并不会被正确地增加；这个程序可能会引发一个严重的<code>bug</code>：竞态条件（参见9.1）。为了避免这个问题，我们必须保证每次修改变量的最多只能有一个<code>goroutine</code>，这也就是代码里的<code>mu.Lock()</code>和<code>mu.Unlock()</code>调用将修改<code>count</code>的所有行为包在中间的目的。第九章中我们会进一步讲解共享变量。</p><p>下面是一个更为丰富的例子，<code>handler</code>函数会把请求的<code>http</code>头和请求的<code>form</code>数据都打印出来，这样可以使检查和调试这个服务更为方便：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// handler echoes the HTTP request.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;%s %s %s\n&quot;</span>, r.Method, r.URL, r.Proto)<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> r.Header &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Header[%q] = %q\n&quot;</span>, k, v)<br>&#125;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Host = %q\n&quot;</span>, r.Host)<br>fmt.Fprintf(w, <span class="hljs-string">&quot;RemoteAddr = %q\n&quot;</span>, r.RemoteAddr)<br><span class="hljs-keyword">if</span> err := r.ParseForm(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br>&#125;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> r.Form &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Form[%q] = %q\n&quot;</span>, k, v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们用<code>http.Request</code>这个<code>struct</code>里的字段来输出下面这样的内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">GET /?q=query HTTP/1.1<br>Header[&quot;Accept-Encoding&quot;] = [&quot;gzip, deflate, sdch&quot;]<br>Header[&quot;Accept-Language&quot;] = [&quot;en-US,en;q=0.8&quot;]<br>Header[&quot;Connection&quot;] = [&quot;keep-alive&quot;]<br>Header[&quot;Accept&quot;] = [&quot;text/html,application/xhtml+xml,application/xml;...&quot;]<br>Header[&quot;User-Agent&quot;] = [&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)...&quot;]<br>Host = &quot;localhost:8000&quot;<br>RemoteAddr = &quot;127.0.0.1:59911&quot;<br>Form[&quot;q&quot;] = [&quot;query&quot;]<br></code></pre></td></tr></table></figure><p>可以看到这里的<code>ParseForm</code>被嵌套在了<code>if</code>语句中。<code>Go语言</code>允许这样的一个简单的语句结果作为局部的变量声明出现在<code>if</code>语句的最前面，这一点对错误处理很有用处。我们还可以像下面这样写（当然看起来就长了一些）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">err := r.ParseForm()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(err)<br>&#125;<br></code></pre></td></tr></table></figure><p>用<code>if</code>和<code>ParseForm</code>结合可以让代码更加简单，并且可以限制<code>err</code>这个变量的作用域，这么做是很不错的。我们会在 2.7 节中讲解作用域。</p><p>在这些程序中，我们看到了很多不同的类型被输出到标准输出流中。比如前面的<code>fetch</code>程序，把<code>HTTP</code>的响应数据拷贝到了<code>os.Stdout</code>，<code>lissajous</code>程序里我们输出的是一个文件。<code>fetchall</code>程序则完全忽略到了<code>HTTP</code>的响应<code>Body</code>，只是计算了一下响应<code>Body</code>的大小，这个程序中把响应<code>Body</code>拷贝到了<code>ioutil.Discard</code>。在本节的<code>web</code>服务器程序中则是用<code>fmt.Fprintf</code>直接写到了<code>http.ResponseWriter</code>中。</p><p>尽管三种具体的实现流程并不太一样，他们都实现一个共同的接口，即当它们被调用需要一个标准流输出时都可以满足。这个接口叫作<code>io.Writer</code>，在 7.1 节中会详细讨论。</p><p><code>Go语言</code> 的接口机制会在第 7 章中讲解，为了在这里简单说明接口能做什么，让我们简单地将这里的<code>web</code>服务器和之前写的<code>lissajous</code>函数结合起来，这样 GIF 动画可以被写到 HTTP 的客户端，而不是之前的标准输出流。只要在 web 服务器的代码里加入下面这几行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">handler := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>lissajous(w)<br>&#125;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, handler)<br></code></pre></td></tr></table></figure><p>或者另一种等价形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>lissajous(w)<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>HandleFunc</code>函数的第二个参数是一个函数的字面值，也就是一个在使用时定义的匿名函数。这些内容我们会在 5.6 节中讲解。</p><p>做完这些修改之后，在浏览器里访问 <a href="http://localhost:8000/">http://localhost:8000</a> 。每次你载入这个页面都可以看到一个像图 1.3 那样的动画。</p><p>练习 1.12： 修改<code>Lissajour</code>服务，从<code>URL</code>读取变量，比如你可以访问 <a href="http://localhost:8000/?cycles=20">http://localhost:8000/?cycles=20</a> 这个URL，这样访问可以将程序里的<code>cycles</code>默认的<code>5</code>修改为<code>20</code>。字符串转换为数字可以调用<code>strconv.Atoi</code>函数。你可以在<code>godoc</code>里查看<code>strconv.Atoi</code>的详细说明。</p>]]></content>
    
    
    <categories>
      
      <category>Go 语言圣经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>gopl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go 语言起源</title>
    <link href="/2023/10/19/gopl/start/"/>
    <url>/2023/10/19/gopl/start/</url>
    
    <content type="html"><![CDATA[<h2 id="Go-语言起源"><a href="#Go-语言起源" class="headerlink" title="Go 语言起源"></a>Go 语言起源</h2><p>编程语言的演化就像生物物种的演化类似，一个成功的编程语言的后代一般都会继承他们祖先的优点；当然有时多种语言杂合也可能会产生令人惊讶的特性；还有一些激进的新特性可能并没有先例。我们可以通过观察编程语言和软硬件是如何互相促进、互相影响的演化过程而学到很多。</p><p>下图展示了有哪些早期的编程语言对 Go 语言的设计产生了重要影响。</p><pre><code class=" mermaid">graph TDAA[&quot;CSP \n (Hoare，1978)&quot;] --&gt; AB[&quot;Squeak \n (Cardelli &amp; Pike, 1985)&quot;]AB --&gt; AC[&quot;Newsqueak \n (Pike 1989)&quot;]AC --&gt; AD[&quot;Alef \n (Winterbottom,1992)&quot;]AD --&gt; GBA[&quot;ALGOL \n （60 Backus et al., 1960）&quot;] --&gt; BB[&quot;Pascal \n （Wirth ，1970） &quot;]BB --&gt; BC[&quot;Modula-2 \n （Wirth， 1980）&quot;]BB --&gt; ACBC --&gt; BD[&quot;Oberon \n （Wirth &amp; Gutknecht, 1986）&quot;]BD --&gt; BE[&quot;Object Oberon \n (Mossenbock,Termpl&amp;Griesemer,1990)&quot;]BD &amp; BE --&gt; BF[&quot;Oberon-2\n(Wirth&amp;Mossenbock,1991)&quot;]BF --&gt; GBA --&gt; CA[&quot;C \n (Ritchie，1972)&quot;]CA --&gt; G[&quot;Go \n (Griesemer,Pike &amp; Thompson, 2009)&quot;]</code></pre><p><code>Go</code> 语言有时候被描述为 “类 <code>C</code> 语言”，或者是 21 世纪的 <code>C</code> 语言。<code>Go</code> 从 <code>C</code> 语言继承了相似的表达式语法、控制流结构、基础数据类型、调用参数传值、指针等很多思想，还有 <code>C</code> 语言一直所看重的编译后机器码的运行效率以及和现有操作系统的无缝适配。</p><p>但是在 <code>Go</code> 语言的家族树中还有其他的祖先。其中有一个影响力的分支来自 <a href="https://en.wikipedia.org/wiki/Niklaus_Wirth">Niklaus Wirth</a> 所设计的 <code>Pascal</code> 语言。然后 <code>Modula-2</code> 语言激发了包的概念。然后 <code>Oberon</code> 语言摒弃了模块接口文件和模块实现文件之间的区别。第二代的 <code>Oberon-2</code> 语言直接影响了包的导入和声明的语法，还有<code>Oberon</code>语言的面向对象特性所提供的方法的声明语法等。</p><p><code>Go</code> 语言的另一支祖先，带来了<code>Go</code> 语言有别于其他语言的重要特性，灵感来自贝尔实验室的 <a href="https://en.wikipedia.org/wiki/Tony_Hoare">Tony Hoare</a> 于1978年发表的鲜为外界所知的关于并发研究的基础文献 <em>顺序通信进程</em>（ communicating sequential processes，缩写为<code>CSP</code>）。在<code>CSP</code>中，程序是一组中间没有共享状态的平行运行的处理过程，它们之间使用管道进行通信和控制同步。不过 <a href="https://en.wikipedia.org/wiki/Tony_Hoare">Tony Hoare</a> 的 <code>CSP</code> 只是一个用于描述并发性基本概念的描述语言，并不是一个可以编写可执行程序的通用编程语言。</p><p>接下来， Rob Pike 和其他人开始不断尝试将 <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> 引入实际的编程语言中。他们第一次尝试引入 <code>CSP</code> 特性的编程语言叫 <a href="http://doc.cat-v.org/bell_labs/squeak/">squeak</a> (老鼠间交流的语言)，是一个提供鼠标和键盘事件处理的编程语言，它的管道是静态创建的。然后是改进版的 <a href="http://doc.cat-v.org/bell_labs/squeak/">Newsqueak</a> 语言，提供了类似 <code>C</code> 语言语句和表达是的语法和类似 <code>Pascal</code> 语言的推导语法。<code>Newsqueak</code> 是一个带垃圾回收的纯函数式语言，它再次针对键盘、鼠标和窗口事件管理。但是在 <code>Newsqueak</code>  语言中管道是动态创建的，属于第一类值，可以保存到变量中。</p><p>在 Plan9 操作系统中，这些优秀的想法被吸收到了一个叫 Alef 的编程语言中。Alef 试图将 <code>Newsqueak</code> 语言改造为系统编程语言，但是因为缺少垃圾回收机制而导致并发编程很痛苦。</p><p><code>Go</code> 语言的一些其他特性零散地来自于其他一些编程语言；比如 iota 语法是从 APL 语言借鉴，词法作用域与嵌套函数来自于 <code>Scheme</code> 语言。当然，我们也可以从 <code>Go</code> 中发现很多创新的设计。比如 Go 语言的切片为动态数组提供了有效的随机存取的性能，这可能会让人联想到链表的底层的共享机制。还有 Go 语言新发明的 defer 语句。</p><h2 id="Go-语言项目"><a href="#Go-语言项目" class="headerlink" title="Go 语言项目"></a>Go 语言项目</h2><p>所有的编程语言都反映了语言设计者对编程哲学的反思，通常包括之前的语言所暴露的一些不足地方的改进。<code>Go</code> 项目是在 Google 公司维护超级复杂的几个软件系统遇到的一些问题的反思（但是这类问题绝不是 Google 公司所特有的）。</p><p>正如 Rob Pike 所说，“软件的复杂性是乘法级相关的”，通过增加一个部分的复杂性来修复问题通常将慢慢地增加其他部分的复杂性。通过增加功能、选项和配置是修复问题的最快途径，但是这很容易让人忘记简洁的内涵，既从长远来看，简洁依然是好软件的关键因素。</p><p>简洁的设计需要在工作开始的时候舍弃不必要的想法，并且在软件的生命周期内严格区别好的改变和坏的改变。通过足够的努力，一个好的改变可以在不破坏原有完整概念的前提下保持自适应，正如 Fred Brooks 所说的“概念完整性”；而一个坏的改变则不能达到这个效果，他们仅仅是通过肤浅和简单的妥协来破坏原有设计的一致性。只有通过简洁的设计，才能让一个系统保持稳定、安全和持续的进化。</p><p><code>Go</code> 项目包括编程语言本身，附带了相关的工具和标准库，最后但并非代表不重要的是，关于简洁编程哲学的宣言。就事后诸葛亮的角度来看，<code>Go</code> 语言的这些地方都做的还不错：拥有自动垃圾回收、一个包系统、函数作为一等公民、词法作用域、系统调用接口、只读的 UTF8 字符串等。但是 <code>Go</code> 语言本身只有很少的特性，也不太可能添加太多的特性。例如，它没有隐式的数值转换、没有构造函数和析构函数、没有运算符重载、没有默认参数、没有泛型（1.19 已有）、没有继承、没有异常没有宏、没有函数修饰、更没有线程局部存储。但是，语言本身是成熟和稳定的，而且承诺保证向后兼容：用之前的 <code>Go</code> 语言编写的程序可以用新版本的 <code>Go</code> 语言编译器和标准库直接构建而不需要修改代码。</p><p><code>Go</code> 语言有足够的类型系统以避免动态语言中那些粗心的类型错误，但是，<code>Go</code> 语言的类型系统相比传统的强类型语言又要简洁很多。虽然，有时候这会导致一个“无类型”的抽象概念，但是 <code>Go</code> 语言程序员并不需要像 <code>C++</code> 或 <code>Haskell</code> 程序员那样纠结于具体类型的安全属性。在实践中， <code>Go</code> 语言简洁的类型系统会给程序员带来了更多的安全性和更好的运行时性能。</p><p><code>Go</code> 语言鼓励当代计算机系统设计的原则，特别是局部的重要性。它的内置数据类型和大多数的准库数据结构都经过精心设计而避免显式的初始化或隐式的构造函数，因为很少的内存分配和内存初始化代码被隐藏在库代码中了。 <code>Go</code> 语言的聚合类型（结构体和数组）可以直接操作他们的元素，只需要更少的存储空间、更少的内存写操作，而且指针操作比其他间接操作的语言也更有效率。由于现代计算机是一个并行的机器， <code>Go</code> 语言提供了基于 <code>CSP</code> 的并发特性支持。<code>Go</code> 语言的动态栈使得轻量级线程 <code>goroutine</code> 的初始栈可以很小，因此，创建一个 <code>goroutine</code> 的代价很小，创建百万级的 <code>goroutine</code> 完全是可行的。</p><p><code>Go</code> 语言的标准库（通常被称为语言自带的电池），提供了清晰的构建模块和公共接口，包含<code>I/O</code> 操作、文本处理、图像、密码学、网络和分布式应用程序等，并支持许多标准化的文件格式和编解码协议。库和工具使用了大量的约定来减少额外的配置和解释，从而最终简化程序的逻辑，而且，每个 <code>Go</code> 程序结构都是如此的相似，因此，<code>Go</code> 程序也很容易学习。使用 <code>Go</code> 语言自带工具构建 <code>Go</code> 语言项目只需要使用文件名和标识符名称，一个偶尔的特殊注释来确定所有的库、可执行文件、测试、基准测试、例子、以及特定于平台的变量、项目的文档等；<code>Go</code> 语言源代码本身就包含了构建规范。</p><h2 id="本书的组织"><a href="#本书的组织" class="headerlink" title="本书的组织"></a>本书的组织</h2><p>我们假设你已经有一种或多种其他编程语言的使用经历，不管是类似于<code>C</code>、<code>C++</code> 或 <code>Java</code> 的编译型语言，还是类似于 <code>Python</code>、<code>Ruby</code>、<code>JavaScript</code> 的脚本语言，因此我们不会像对完全的编程语言初学者那样解释所有的细节。因为，<code>Go</code> 语言的变量、常量、表达式、控制流和函数等基本语法也是类似的。</p><p>第一章包含了本教程的基本结构，通过十几个程序介绍了用 <code>Go</code> 语言如何实现类似读写文件、文本格式化、创建图像、网络客户端和服务器通讯等日常工作。</p><p>第二章描述了 <code>Go</code> 语言程序的基本元素结构、变量、新类型定义、包和文件、以及作用域等概念。第三章讨论了数字、布尔值、字符串和常量，并演示了如何显示和处理 Unicode 字符。第四章描述了符合类型，从简单的数组、字典、切片到动态列表。第五章涵盖了函数，并讨论了错误处理、<code>panic</code> 和 <code>recover</code>，还有 <code>defer</code>语句。</p><p>第一章到第五章是基础部分，主流命令式编程语言这部分都类似。个别之处，<code>Go</code> 语言有自己特色的语法和风格，但是大多数程序员能很快适应。其余章节是 <code>Go</code> 语言 特有的：方法、接口、并发、包、测试和反射等语言特性。</p><p><code>Go</code> 语言的面向对象机制与一般语言不同。它没有类层次结构，甚至可以说没有类；仅仅通过组合（而不是继承）简单的对象来构建复杂的对象。方法不仅可以定义在结构体上，而且，可以定义在任何用户自定义类型上；并且，具体类型和抽象类型（接口）之间的关系是隐式的，所以很多类型的设计者可能并不知道该类型到底实现了那些接口。方法在第六章讨论，接口在第七章讨论。</p><p>第八章讨论了基于顺序通信进程（CSP）概念的并发编程，使用 <code>goroutines</code> 和 <code>channels</code> 处理并发编程。第九章则讨论了传统的基于共享变量的并发编程。</p><p>第十章描述了包机制和包的组织结构。这一章还展示了如何有效地利用 <code>Go</code> 自带的工具、使用单个命令完成变异、测试、基准测试、代码格式化、文档以及其他诸多任务。</p><p>第十一章讨论了单元测试，<code>Go</code> 语言的工具和标准库中集成了轻量级的测试功能，避免了强大但复杂的测试框架。测试库提供了一些基本构件，必要时可以用来构件复杂的测试构件。</p><p>第十二章讨论了反射，一种程序在运行期间审视自己的能力。反射是一个强大的编程工具，不过要谨慎地使用；这一章利用反射机制实现一些重要的 <code>Go</code> 语言 库函数，展示了反射的强大用法。第十三章解释了底层的编程的细节，在必要时，可以使用 <code>unsafe</code> 包绕过 <code>Go</code> 语言安全的类型系统。</p><p>每一章都有一些练习题，你可以用来测试你对 <code>Go</code> 的理解，你也可以探讨书中浙西列子的扩展和替代。</p><p>书中的所有代码都可以从 <a href="https://github.com/adonovan/gopl.io">https://github.com/adonovan/gopl.io</a> 上的仓库下载。 <code>git clone https://github.com/adonovan/gopl.io</code> 命令将代码下载至当前目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/adonovan/gopl.io    <span class="hljs-comment"># 克隆代码</span><br>$ go run gopl.io/ch1/helloworld/main.go <span class="hljs-comment"># 运行代码</span><br>Hello, 世界                     <span class="hljs-comment"># 这是中文</span><br><br></code></pre></td></tr></table></figure><p>运行这些例子需要安装 <code>Go 1.5</code> 以上的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go version<br>go version go1.5 linux/amd64<br></code></pre></td></tr></table></figure><p>如果使用其他的操作系统，请参考 <a href="https://golang.org/doc/install">https://golang.org/doc/install</a> 提供的说明安装。</p><h2 id="更多的信息"><a href="#更多的信息" class="headerlink" title="更多的信息"></a>更多的信息</h2><p>最佳的帮助信息来自 <code>Go</code> 语言的官方网站，<a href="https://go.dev/">https://go.dev</a> ，它提供了完善的参考文档，包括编程语言和标准库等诸多权威的帮助信息。同时也包含了如何编写更地道的 <code>Go</code> 程序的基本教程，还有各种各样的在线文本资源和视频资源，他们是本书最有价值的补充。<code>Go</code> 语言的官方博客 <a href="https://go.dev/blog/">https://go.dev/blog/</a> 会不定期发布一些 <code>Go</code> 语言最好的实践文章，包括当前语言的发展状态、未来的计划、会议报告和 <code>Go</code>  语言相关的各种会议的主题等信息（译注： <a href="https://go.dev/talks/">https://go.dev/talks/</a> 包含了官方收录的各种报告的讲稿）。</p><p>在线访问一个有价值的地方是可以从 Web 页面运行 <code>Go</code> 语言的程序。这个功能由来自 <a href="https://go.dev/play/">https://go.dev/play/</a> 的 <code>Go Playground</code> 提供，并且可以方便的嵌入到其它页面中。</p><p>Playground 可以简单的通过执行一个小程序来测试对语法、语义和程序库的理解，类似其他很多语言提供的 REPL 即时运行的工具。同时它可以生成对应的 <code>URL</code> ,非常适合共享 <code>Go</code> 语言代码片段、汇报 bug 或者提供反馈意见等。</p><p>基于 Playground 构建的 [Go Tour](<a href="https://go.dev/tour/welcome/1">A Tour of Go</a>) ,是一个系列的 <code>Go</code> 语言入门教程，它包含了诸多基本概念和结构相关的并可在线运行的互动小程序。</p><p>当然，Playground 和 Tour 也有一些限制，它们只能导入标准库，而且因为安全的原因对一些网络库做了限制。如果要在编译和运行时需要访问互联网，对于一些更复杂的实验，你可能需要在自己的电脑上构建并运行程序。幸运的是下载 <code>Go</code> 语言的过程很简单，从 <a href="https://go.dev/">https://go.dev</a> 下载安装包应该不超过几分钟，然后就可以在自己电脑上编写和运行 <code>Go</code> 程序了。</p><p><code>Go</code> 语言是一个开源项目，你可以在 <a href="https://pkg.go.dev/std">Standard library - Go Packages</a> 阅读标准库中任意函数和类型的实现代码，和下载安装包的代码完全一致。这样，你可以知道很多函数是如何工作的， 通过挖掘找出一些答案的细节，或者仅仅是出于欣赏专业级 <code>Go</code> 代码。</p>]]></content>
    
    
    <categories>
      
      <category>Go 语言圣经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>gopl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标点符号规范</title>
    <link href="/2023/02/23/writing-standard/marks/"/>
    <url>/2023/02/23/writing-standard/marks/</url>
    
    <content type="html"><![CDATA[<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>（1）中文语句的标点符号，均应该采取全角符号，这样可以与全角文字保持视觉的一致。</p><p>（2）如果整句为英文，则该句使用英文&#x2F;半角标点。</p><p>（3）句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</p><p>（4）点号（句号、逗号、顿号、分号、冒号）不得出现在标题的末尾，而标号（引号、括号、破折号、省略号、书名号、着重号、间隔号、叹号、问号）可以。</p><h2 id="句号"><a href="#句号" class="headerlink" title="句号"></a>句号</h2><p>（1）中文语句的结尾处应该用全角句号（<code>。</code>）。</p><p>（2）句子末尾用括号加注时，句号应在括号之外。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）<br><br>正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。<br></code></pre></td></tr></table></figure><h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h2><p>（1）逗号（<code>，</code>）表示句子内部的一般性停顿。</p><p>（2）注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p><h2 id="顿号"><a href="#顿号" class="headerlink" title="顿号"></a>顿号</h2><p>（1）句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。<br><br>正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。<br></code></pre></td></tr></table></figure><p>（2）英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.<br></code></pre></td></tr></table></figure><p>（3）中文句子内部的并列词，最后一个尽量使用（<code>和</code>）来连接，使句子读起来更加连贯，下面两个句子都可以，第二个更优。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里，以及百度等。<br><br>正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。<br></code></pre></td></tr></table></figure><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>（1）分号（<code>；</code>）表示复句内部并列分句之间的停顿。</p><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><p>（1）引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：许多人都认为客户服务的核心是“友好”和“专业”。<br></code></pre></td></tr></table></figure><p>（2）引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”<br></code></pre></td></tr></table></figure><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>（1）补充说明时，使用全角圆括号（<code>（）</code>），括号前后不加空格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：请确认所有的连接（电缆和接插件）均安装牢固。<br></code></pre></td></tr></table></figure><p>（2）几种括号的中英文名称。</p><table><thead><tr><th></th><th align="center">英文</th><th align="center">中文</th></tr></thead><tbody><tr><td><code>&#123; &#125;</code></td><td align="center">braces 或 curly brackets</td><td align="center">大括号</td></tr><tr><td><code>[ ]</code></td><td align="center">square brackets 或 brackets</td><td align="center">方括号</td></tr><tr><td><code>&lt; &gt;</code></td><td align="center">angled brackets</td><td align="center">尖括号</td></tr><tr><td><code>( )</code></td><td align="center">parentheses</td><td align="center">圆括号</td></tr></tbody></table><h2 id="冒号"><a href="#冒号" class="headerlink" title="冒号"></a>冒号</h2><p>（1）全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：请确认以下几项内容：时间、地点、活动名称和来宾数量。<br></code></pre></td></tr></table></figure><p>（2）表示时间时，应使用半角冒号（<code>:</code>）。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：早上 8:00<br></code></pre></td></tr></table></figure><h2 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h2><p>（1）省略号（<code>⋯⋯</code>）表示语句未完、或者语气的不连续。</p><p>（2）省略号占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</p><p>（3）省略号不应与“等”这个词一起使用。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。<br><br>正确：我们为会餐准备了各色水果，有香蕉、苹果、梨⋯⋯<br><br>正确：我们为会餐准备了香蕉、苹果、梨等各色水果。<br></code></pre></td></tr></table></figure><h2 id="感叹号"><a href="#感叹号" class="headerlink" title="感叹号"></a>感叹号</h2><p>（1）应该使用平静的语气叙述，尽量避免使用感叹号（<code>！</code>）。</p><p>（2）不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</p><h2 id="破折号"><a href="#破折号" class="headerlink" title="破折号"></a>破折号</h2><p>（1）破折号<code>————</code>一般用于进一步解释。</p><p>（2）破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。<br><br>例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。<br></code></pre></td></tr></table></figure><h2 id="连接号"><a href="#连接号" class="headerlink" title="连接号"></a>连接号</h2><p>（1）连接号用于连接两个类似的词。</p><p>（2）以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</p><ul><li>两个名词的复合</li><li>图表编号</li></ul><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：氧化-还原反应<br><br>例句：图 1-1<br></code></pre></td></tr></table></figure><p>（3）数值范围（例如日期、时间或数字）应该使用波浪连接号（<code>～</code>）或一字号（<code>—</code>），占一个全角字符的位置。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：2009 年～2011 年<br></code></pre></td></tr></table></figure><p>注意，波浪连接号前后两个值都建议加上单位。</p><p>（4）波浪连接号也可以用汉字“至”代替。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例句：周围温度：-20 °C 至 -10 °C<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>标点符号</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文档规范</title>
    <link href="/2023/02/23/writing-standard/structure/"/>
    <url>/2023/02/23/writing-standard/structure/</url>
    
    <content type="html"><![CDATA[<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>软件手册是一部完整的书，建议采用下面的结构。</p><ul><li><strong>简介</strong>（Introduction）：[必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li><li><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</li><li><strong>入门篇</strong>（Basics）：[必备] [目录] 又称“使用篇”，提供初级的使用教程<ul><li><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li><li><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</li><li><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</li></ul></li><li><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称“开发篇”，提供中高级的开发教程</li><li><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li><li><strong>FAQ</strong>：[可选] [文件] 常见问题解答</li><li><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容<ul><li><strong>Glossary</strong>：[可选] [文件] 名词解释</li><li><strong>Recipes</strong>：[可选] [文件] 最佳实践</li><li><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</li><li><strong>ChangeLog</strong>：[可选] [文件] 版本说明</li><li><strong>Feedback</strong>：[可选] [文件] 反馈方式</li></ul></li></ul><p>下面是两个真实范例，可参考。</p><ul><li><a href="https://redux.js.org/introduction/getting-started">Redux 手册</a></li><li><a href="http://flight-manual.atom.io/">Atom 手册</a></li></ul><h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><p>文档的文件名不得含有空格。</p><p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：名词解释.md<br><br>正确：glossary.md<br></code></pre></td></tr></table></figure><p>文件名建议只使用小写字母，不使用大写字母。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：TroubleShooting.md<br><br>正确：troubleshooting.md<br></code></pre></td></tr></table></figure><p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</p><p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">不佳：advanced_usage.md<br><br>正确：advanced-usage.md<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>参考链接规范</title>
    <link href="/2023/02/23/writing-standard/reference/"/>
    <url>/2023/02/23/writing-standard/reference/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.taodocs.com/p-51273.html">产品手册中文写作规范</a>, by 华为</li><li><a href="http://guide.daocloud.io/dcs/%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83%E5%92%8C%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83-9153803.html">写作规范和格式规范</a>, by DaoCloud</li><li><a href="http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf">技术写作技巧在日汉翻译中的应用</a>, by 刘方</li><li><a href="https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf">简体中文规范指南</a>, by lengoo</li><li><a href="https://open.leancloud.cn/copywriting-style-guide.html">文档风格指南</a>, by LeanCloud</li><li><a href="https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit">豌豆荚文案风格指南</a>, by 豌豆荚</li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a>, by sparanoid</li><li><a href="http://w3c.github.io/clreq/">中文排版需求</a>, by W3C</li><li><a href="http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html">为什么文件名要小写？</a>, by 阮一峰</li><li><a href="https://developers.google.com/style/">Google Developer Documentation Style Guide</a>, by Google</li><li><a href="http://www.moe.gov.cn/ewebeditor/uploadfile/2015/01/13/20150113091154536.pdf">出版物上数字用法的规定（国家标准GBT15835－2011）</a></li><li><a href="https://zh.wikisource.org/zh-hans/GB_3100-1993_%E5%9B%BD%E9%99%85%E5%8D%95%E4%BD%8D%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8">GB 3100-1993 国际单位制及其应用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>参考链接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值规范</title>
    <link href="/2023/02/23/writing-standard/number/"/>
    <url>/2023/02/23/writing-standard/number/</url>
    
    <content type="html"><![CDATA[<h2 id="半角数字"><a href="#半角数字" class="headerlink" title="半角数字"></a>半角数字</h2><p>阿拉伯数字一律使用半角形式，不得使用全角形式。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：这件商品的价格是１０００元。<br><br>正确：这件商品的价格是 1000 元。<br></code></pre></td></tr></table></figure><h2 id="千分号"><a href="#千分号" class="headerlink" title="千分号"></a>千分号</h2><p>数值为千位以上，应添加千分号（半角逗号）。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">XXX 公司的实收资本为 ￥1,258,000 人民币。<br></code></pre></td></tr></table></figure><p>对于 4 位的数值，千分号是选用的，比如<code>1000</code>和<code>1,000</code>都可以接受。对于 4 位以上的数值，应添加千分号。</p><h2 id="货币"><a href="#货币" class="headerlink" title="货币"></a>货币</h2><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Plain">$1,000<br>1,000 美元<br></code></pre></td></tr></table></figure><p>英文的货币名称，建议参考国际标准 <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a>。</p><h2 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h2><p>表示数值范围时，用波浪线（<code>～</code>）或一字线（<code>—</code>）连接。参见《标点符号》一节的“连接号”部分。</p><p>带有单位或百分号时，两个数字建议都要加上单位或百分号。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">132 kg～234 kg<br><br>67%～89%<br></code></pre></td></tr></table></figure><h2 id="变化程度的表示法"><a href="#变化程度的表示法" class="headerlink" title="变化程度的表示法"></a>变化程度的表示法</h2><p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Plain">增加到过去的两倍<br>（过去为一，现在为二）<br><br>增加了两倍<br>（过去为一，现在为三）<br></code></pre></td></tr></table></figure><p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Plain">降低到百分之八十<br>（定额是一百，现在是八十）<br><br>降低了百分之八十<br>（原来是一百，现在是二十）<br></code></pre></td></tr></table></figure><p>不能用“降低 N 倍”或“减少 N 倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>数值</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文本规范</title>
    <link href="/2023/02/23/writing-standard/text/"/>
    <url>/2023/02/23/writing-standard/text/</url>
    
    <content type="html"><![CDATA[<h2 id="字间距"><a href="#字间距" class="headerlink" title="字间距"></a>字间距</h2><p>（1）全角中文字符与半角英文字符之间，应有一个半角空格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：本文介绍如何快速启动Windows系统。<br><br>正确：本文介绍如何快速启动 Windows 系统。<br></code></pre></td></tr></table></figure><p>（2）全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。<br><br>正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。<br></code></pre></td></tr></table></figure><p>半角的百分号，视同阿拉伯数字。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">正确：今年我国经济增长率是6.5%。<br><br>正确：今年我国经济增长率是 6.5%。<br></code></pre></td></tr></table></figure><p>（3）英文单位若不翻译，单位前的阿拉伯数字与单位符号之间，应留出适当的空隙。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">例1：一部容量为 16 GB 的智能手机<br><br>例2：1 h = 60 min = 3,600 s<br></code></pre></td></tr></table></figure><p>（4）半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：他的电脑是 MacBook Air 。<br><br>正确：他的电脑是 MacBook Air。<br></code></pre></td></tr></table></figure><h2 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h2><p>（1）避免使用长句。</p><p>不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，任何情况下都不能接受。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。<br><br>正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。<br></code></pre></td></tr></table></figure><p>逗号分割的长句，总长度不应该超过 100 字或者正文的 3 行。</p><p>（2）尽量使用简单句和并列句，避免使用复合句。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">并列句：他昨天生病了，没有参加会议。<br><br>复合句：那个昨天生病的人没有参加会议。<br></code></pre></td></tr></table></figure><p>（3）同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：请确认没有接通装置的电源。<br><br>正确：请确认装置的电源已关闭。<br></code></pre></td></tr></table></figure><p>（4）避免使用双重否定句。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：没有删除权限的用户，不能删除此文件。<br><br>正确：用户必须拥有删除权限，才能删除此文件。<br></code></pre></td></tr></table></figure><h2 id="写作风格"><a href="#写作风格" class="headerlink" title="写作风格"></a>写作风格</h2><p>（1）尽量不使用被动语态，改为使用主动语态。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：假如此软件尚未被安装，<br><br>正确：假如尚未安装这个软件，<br></code></pre></td></tr></table></figure><p>（2）不使用非正式的语言风格。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！<br><br>正确：无法参加本次活动，我深感遗憾。<br></code></pre></td></tr></table></figure><p>（3）不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：这是唯二的快速启动的方法。<br><br>正确：这是仅有的两种快速启动的方法。<br></code></pre></td></tr></table></figure><p>（4）用对“的”、“地”、“得”。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Plain">她露出了开心的笑容。<br>（形容词＋的＋名词）<br><br>她开心地笑了。<br>（副词＋地＋动词）<br><br>她笑得很开心。<br>（动词＋得＋副词）<br></code></pre></td></tr></table></figure><p>（5）使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：从管理系统可以监视中继系统和受其直接控制的分配系统。<br><br>正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。<br></code></pre></td></tr></table></figure><p>（6）名词前不要使用过多的形容词。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。<br><br>正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。<br></code></pre></td></tr></table></figure><h2 id="英文处理"><a href="#英文处理" class="headerlink" title="英文处理"></a>英文处理</h2><p>（1）英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">英文：...information stored in random access memory (RAMs)...<br><br>中文：⋯⋯存储在随机存取存储器（RAM）里的信息⋯⋯<br></code></pre></td></tr></table></figure><p>（2）外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Plain">U.S.A.<br>Apple, Inc.<br></code></pre></td></tr></table></figure><p>（3）表示中文时，英文省略号（<code>...</code>）应改为中文省略号（<code>⋯⋯</code>）。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">英文：5 minutes later...<br><br>中文：5 分钟过去了⋯⋯<br></code></pre></td></tr></table></figure><p>（4）英文书名或电影名改用中文表达时，双引号应改为书名号。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">英文：He published an article entitled &quot;The Future of the Aviation&quot;.<br><br>中文：他发表了一篇名为《航空业的未来》的文章。<br></code></pre></td></tr></table></figure><p>（5）第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。<br></code></pre></td></tr></table></figure><p>（6）专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。<br><br>“online transaction processing”（在线事务处理）不是专有名词，不应大写。<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>文本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>段落规范</title>
    <link href="/2023/02/23/writing-standard/paragraph/"/>
    <url>/2023/02/23/writing-standard/paragraph/</url>
    
    <content type="html"><![CDATA[<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul><li>一个段落只能有一个主题，或一个中心句子。</li><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为中心句子服务。</li><li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li><li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li><li>段落之间使用一个空行隔开。</li><li>段落开头不要留出空白字符。</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用第三方内容时，应注明出处。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">One man’s constant is another man’s variable. — Alan Perlis<br></code></pre></td></tr></table></figure><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">本文转载自 WikiQuote<br></code></pre></td></tr></table></figure><p>使用外部图片时，必须在图片下方或文末标明来源。</p><figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">本文部分图片来自 Wikipedia<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>段落</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标题规范</title>
    <link href="/2023/02/23/writing-standard/title/"/>
    <url>/2023/02/23/writing-standard/title/</url>
    
    <content type="html"><![CDATA[<h2 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h2><p>标题分为四级。</p><ul><li>一级标题：文章的标题</li><li>二级标题：文章主要部分的大标题</li><li>三级标题：二级标题下面一级的小标题</li><li>四级标题：三级标题下面某一方面的小标题</li></ul><p>下面是示例。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><br><span class="hljs-section">## 二级标题</span><br><br><span class="hljs-section">### 三级标题</span><br><br><span class="hljs-section">#### 四级标题</span><br></code></pre></td></tr></table></figure><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>（1）一级标题下，不能直接出现三级标题。</p><p>示例：下面的文章结构，缺少二级标题。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><br><span class="hljs-section">### 三级标题</span><br></code></pre></td></tr></table></figure><p>（2）标题要避免孤立编号（即同级标题只有一个）。</p><p>示例：下面的文章结构，<code>二级标题 A</code>只包含一个三级标题，完全可以省略<code>三级标题 A</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## 二级标题 A</span><br><br><span class="hljs-section">### 三级标题 A</span><br><br><span class="hljs-section">## 二级标题 B</span><br></code></pre></td></tr></table></figure><p>（3）下级标题不重复上一级标题的名字。</p><p>示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## 概述</span><br><br><span class="hljs-section">### 概述</span><br></code></pre></td></tr></table></figure><p>（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。</p><p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</p><p>示例：下面的结构二要好于结构一。结构一适用的场景，主要是较长篇幅的内容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown">结构一<br><br><span class="hljs-section">### 三级标题</span><br><br><span class="hljs-section">#### 四级标题 A</span><br><br><span class="hljs-section">#### 四级标题 B</span><br><br><span class="hljs-section">#### 四级标题 C</span><br><br>结构二<br><br><span class="hljs-section">### 三级标题</span><br><br><span class="hljs-strong">**（1）A**</span><br><br><span class="hljs-strong">**（2）B**</span><br><br><span class="hljs-strong">**（3）C**</span><br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</li></ul>]]></content>
    
    
    <categories>
      
      <category>写作标准</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
      <tag>规范</tag>
      
      <tag>标题</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
